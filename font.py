# ############################################################################ #
#  Copyright (c) 2021, Jason Bamford  www.bamfordresearch.com                  #
#  All rights reserved.                                                        #
#                                                                              #
#  This source code is licensed under the Modified BSD License found           #
#  in the LICENSE.md file in the root directory of this source tree.           #
# ############################################################################ #

# designed 30.6.2021 by Jason Bamford


def getfont(mono=False, weight=1.0, width=1.0):
  if width < 0.6: width = 0.6
  if width > 1.8: width = 1.8
  if weight < 0.1: weight = 0.1
  if weight > 3: weight = 3

  s = 0.1 * weight       # stroke width
  x = 0.4 + 0.1 * width   # x height
  d = 0.4                 # descender height
  D = 0.35 * width        # digit half-width
  E = 0.28                # digit corner radius
  W = 0.35 * width        # capital half-width
  M = 0.2 + 0.2 * width   # wide capital half-width
  Q = 0.5                 # circular capital radius
  w = 0.3 * width         # small letter half-width
  m = w * 1.5   # small wide width
  q = x / 2               # circular small radius

  p = 0.1  # dot height
  pp = 0.07  # dot stroke
  if pp < s: pp = s

  if mono:
    W = D
    M = D
    Q = D if D < 0.5 else 0.5
    w = D
    m = D
    q = D if D < x * 0.7 else x * 0.7

  y = x if width >= 1.0 else w * 1.5  # h n corner radius
  if D < E: E = D

  DW = D * 2 + s    # digit character width
  NW = W * 2 + s    # captial narrow character width
  MW = M * 2 + s    # capital wide character width
  OW = Q * 2 + s        # capital round character width
  nw = w * 2 + s    # small letter narrow width
  mw = m * 2 + s    # small letter wide width
  ow = 1 + s        # small round width

  DA = D if D < 0.4 else 0.4  # ampersand diameter

  ks = (w,w,w/2, w,w,w/2)  # kern data for standard small letter
  km = (m,m,m/2, m,m,m/2)  # small wide
  ka = (w,w,w, w,w,w/2)    # kern data for standard small letter with ascender

  font = [
  ( DW, ), # space
  ( s*3, (1, -s/4,1, 0,p+pp+s, s), (1, s/4,1, 0,p+pp+s, s), (1, 0,0, 0,p, pp) ),
  ( .2+s*2, (1, -s-0.05,1, -s-0.05,0.7, s), (1, s+0.05,1, s+0.05,0.7, s) ),
  ( DW, (1, -D/2,.9, -D/2,.1, s), (1, D/2,.9, D/2,.1, s), (1, -D,0.6+s, D,0.6+s, s), (1, -D,0.4-s, D,0.4-s, s) ),
  ( DW, (1, 0,0, 0,1, s), (1, -D+.15,0.85, D*.8,0.85, s), (1, -D+.15,0.5, D-.15,0.5, s), (1, -D*.8,.15, D-.15,.15, s), (0, -D+.15,.675, .15, 180,-90, s), (0, D-.15,.325, .15, 180,90, s) ), # $
  ( DW, (1, -D,0, D,1, s), (0, -D/2,0.8, 0.17, 360,-135, s), (0, D/2,0.2, 0.17, 360,45, s) ),  # %
  ( DW, (0, 0,DA, DA, 180,0, s), (0, -DA/4,1-DA/2, DA/2, 180,180, s), (1, DA,0, -DA/4-DA/2,1-DA/2, s), (1, -DA,DA, -DA/4+DA/2,1-DA/2, s) ),  # &
  ( 2*s, (1, 0,1, 0,0.7, s) ), # '
  ( DW, (0, 0.95,0.5, 1, 60,-90, s), ),  # (
  ( DW, (0, -0.95,0.5, 1, 60,90, s), ),  # )
  ( DW, (1, 0,0.9, 0,0.1, s), (1, -D,0.7, D,0.3, s), (1, -D,0.3, D,0.7, s) ),  # ASTERISK
  ( DW, (1, 0,0.9, 0,0.1, s), (1, -D,0.5, D,0.5, s) ),  # +
  ( 2*s, (1, -0.2,-0.2, 0,p, s) ),  # ,
  ( DW, (1, -D,0.5, D,0.5, s) ),  # -
  ( 2*s, (1, 0,0, 0,p, pp)  ),  # .
  ( (D,D/2,D/2, D/2,D/2,D), (1, -D*.8,0.1, D*.8,0.9, s) ),  # /
  ( DW, (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,90,135, s), (1, -D+E,1, D-E,1, s), (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (1, D,1-E, D,E, s), (1, -D,1-E, -D,E, s) ),  # 0
  ( D, (1, 0,1, 0,0, s), (0, -D/4-.1,1, D/4+0.1, 90,45, s), (1, -D/4-.1,.9-D/4, 0,.9-D/4, s) ), # 1
  ( DW, (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,135,113, s), (1, -D+E,1, D-E,1, s), (1, -D+E*.3,E*.7, D-E*.3,1-E*1.7, s), (0, -D+E,0, E, 45,-113, s), (1, -D,0, D, 0, s) ),  # 2
  ( DW, (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,90,135, s), (1, -D+E,1, D-E,1, s), (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (1, D,1-E, D*.8,0.5, s), (1, D,E, D*.8,0.5, s), (1, D*.8,0.5, 0,0.5, s) ),  # 3
  ( DW, (1, D/3,1, D/3,0, s), (1, D/3,1, -D,0.5-s/2, s), (1, -D,0.5-s/2, D,0.5-s/2, s) ), #4
  ( DW, (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (1, -D,1, -D,2*E, s), (1, -D,1, D,1, s), (0, D-E,E, E,90,135, s), (1, -D,2*E, D-E,2*E, s) ),  # 5
  ( DW, (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,75,143, s), (1, -D+E,1, D-E,1, s), (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (1, -D,1-E, -D,E, s), (0, -D+E,E, E,90,-135, s), (0, D-E,E, E,90,135, s), (1, -D+E,2*E, D-E,2*E, s), ),  # 6
  ( DW, (1, -D,1, D,1, s), (0, 1.6,0, 1.6,24,-102, s), (1, 0.127,0.63, D,1, s) ),  # 7   ## (1, D,1, -D/3,0, s)
  ( DW, (0, 0,(1+2*E)/2, (1-2*E)/2, 360,180, s), (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (0, -D+E,E, E,90,-135, s), (0, D-E,E, E,90,135, s), (1, -D+E,2*E, D-E,2*E, s), ),  # 8
  ( DW, (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,90,135, s), (1, -D+E,1, D-E,1, s), (0, -D+E,E, E,75,-36, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (1, D,1-E, D,E, s), (0, -D+E,1-E, E,90,-45, s), (0, D-E,1-E, E,90,45, s), (1, -D+E,1-2*E, D-E,1-2*E, s), ),  # 9
  ( 3*s, (1, 0,0, 0,p, pp), (1, 0,0.5, 0,.5+p, pp)  ),  # :
  ( 3*s, (1, -0.2,-0.2, 0,p, s), (1, 0,0.5, 0,.5+p, pp) ),  # ;
  ( DW, (1, -D*.8,0.5, D*.8,1, s), (1, -D*.8,0.5, D*.8,0, s) ),  # <
  ( DW, (1, -D,0.6+s, D,0.6+s, s), (1, -D,0.4-s, D,0.4-s, s) ),  # =
  ( DW, (1, D*.8,0.5, -D*.8,1, s), (1, D*.8,0.5, -D*.8,0, s) ),  # >
  ( DW, (1, 0,0, 0,p, pp), (0, -D+E,1-E, E,90,-135, s), (0, D-E,1-E, E,90,135, s), (1, -D+E,1, D-E,1, s), (1, D,1-E, 0,0.5, s), (1, 0,0.5, 0,p+pp+s, s) ),  # ?
  ( OW, (0, 0,0.5, Q,320,-135, s), (0, 0,0.5, Q/2,270,-90, s), (1, Q*.4,.5+Q/2, Q*.4,.5-Q/2, s), (1, Q*.4,0.53-Q/2, Q*.8,.53-Q/2, s) ),  # @
  ( (W,W/2,W/2, W,W/2,W/2), (1, -W,0, 0,1, s), (1, W,0, 0,1, s), (1, -W/2,0.5-s/2, W/2,0.5-s/2, s) ),  # A
  ( NW, (1, -W,0, -W,1, s), (1, -W,1, W-.25,1, s), (1, -W,0.5, W-.25,0.5, s), (1, -W,0, W-.25,0, s), (0, W-.25,0.75, 0.25, 180,90, s), (0, W-.25,0.25, 0.25, 180,90, s) ),
  ( (0.3,0.4,0.3, 0.45, 0.45, 0.45), (0, 0.1,0.5, 0.5, 270,-90, s) ), # C
  ( (W,W,W, W*.8,W,W*.8), (1, -W,0, -W,1, s), (1, -W,1, W-0.5,1, s), (1, -W,0, W-0.5,0, s), (0, W-0.5,0.5, 0.5, 180,90, s) ),
  ( (W,W,W, W,W-0.2,W), (1, -W,0, -W,1, s), (1, -W,1, W,1, s), (1, -W,0.5, W-.2,0.5, s), (1, -W,0, W,0, s) ),  # E
  ( (W, W, W, 0, W-.2, W), (1, -W,0, -W,1, s), (1, -W,1, W,1, s), (1, -W,0.5, W-.2,0.5, s) ),
  ( (0.3,0.4,0.3, 0.45, 0.45, 0.45), (0, 0.1,0.5, 0.5, 270,-90, s), (1, 0.1,0.5, 0.45,0.5, s), (1, 0.45,0.5, 0.45,0.15, s) ),
  ( NW, (1, -W,0, -W,1, s), (1, -W,0.5, W,0.5, s), (1, W,0, W,1, s) ), # H
  ( NW, (1, 0,0, 0,1, s), (1, -W,1, W,1, s), (1, -W,0, W,0, s) ),
  ( (W,W,W, W/2,W/2,W), (1, -W,1, W,1, s), (1, -W+W*1.33,W*.67, -W+W*1.33,1, s), (0, -W+W*.67,W*.67, W*.67, 180,0, s) ),
  ( NW, (1, -W,0, -W,1, s), (1, -W+s,0.5, W,1, s), (1, -W+s,0.5, W,0, s), ),  # K
  ( (W,W,W,W,W/2,W/2), (1, -W,0, -W,1, s), (1, -W,0, W,0, s) ),  # L
  ( MW, (1, -M,0, -M,1, s), (1, -M,1, 0,0.5, s), (1, M,1, 0,0.5, s), (1, M,0, M,1, s) ),
  ( NW, (1, -W,0, -W,1, s), (1, -W,1, W,0, s), (1, W,0, W,1, s) ),
  ( (Q*.7,Q,Q*.7, Q*.7,Q,Q*.7), (0, 0.0,0.5, Q, 360,45, s) ), # O
  ( NW, (1, -W,0, -W,1, s), (1, -W,1, W-.25,1, s), (1, -W,0.5, W-.25,0.5, s), (0, W-.25,0.75, 0.25, 180,90, s), ),
  ( (Q*.7,Q,Q*.7, Q,Q,Q*.7), (0, 0.0,0.5, Q, 360,-135, s), (1, 0.1,0.4, Q,0, s) ), # Q
  ( NW, (1, -W,0, -W,1, s), (1, -W,1, W-.25,1, s), (1, -W,0.5, W-.25,0.5, s), (0, W-.25,0.75, 0.25, 180,90, s), (1, 0,0.5, W,0, s) ),
  ( (W*.8,W,W, W,W,W*.8), (1, -W+.25,1, W*.8,1, s), (1, -W+.25,0.5, W-.25,0.5, s), (1, -W*.8,0, W-.25,0, s), (0, -W+0.25,0.75, 0.25, 180,-90, s), (0, W-0.25,0.25, 0.25, 180,90, s) ),
  ( (0,0,W, 0,0,W), (1, 0,0, 0,1, s), (1, -W,1, W,1, s) ), # T
  ( NW, (1, -W,W, -W,1, s), (1, W,W, W,1, s), (0, 0,W, W, 180,0, s) ), # U
  ( (W/2,W/2,W, W/2,W/2,W), (1, -W,1, 0,0, s), (1, W,1, 0,0, s) ), # V
  ( MW, (1, -M,0, -M,1, s), (1, -M,0, 0,0.5, s), (1, M,0, 0,0.5, s), (1, M,0, M,1, s) ),
  ( (W,W/2,W, W,W/2,W), (1, -W,1, W,0, s), (1, -W,0, W,1, s), ),
  ( (W/2,W/2,W, W/2,W/2,W), (1, -W,1, 0,0.5, s), (1, W,1, 0,0.5, s), (1, 0,0.5, 0,0, s) ),
  ( NW, (1, -W,0, W,1, s), (1, -W,1, W,1, s), (1, -W,0, W,0, s) ),  # Z
  ( DW, (1, -D*.5,1, D*.5,1, s), (1, -D*.5,0, D*.5,0, s), (1, -D*.5,1, -D*.5,0, s) ),  # [
  ( (D/2,D/2,D, D,D/2,D/2), (1, D*.8,0.1, -D*.8,0.9, s) ),  # \
  ( DW, (1, -D*.5,1, D*.5,1, s), (1, -D*.5,0, D*.5,0, s), (1, D*.5,1, D*.5,0, s) ),  # ]
  ( DW, (1, -D,0.5, 0,1, s), (1, D,0.5, 0,1, s) ),  # ^
  ( DW, (1, -D,0, D,0, s) ),  # _
  ( DW, (1, 0,1, 0.2,0.7, s) ), # `
  ( ks, (0, -w+x*.25,x*.25, x*.25, 180,-90, s), (1, -w+x*.25,0, w,0, s), (1, -w+x*.25,x*.5, w,x*.5, s), (1, w,0, w,x*.5, s), (0, w-x*.5,x*.5, x*.5,90,135, s), (1, w-x*.5,x, -w*.8,x, s) ), # a
  ( ka, (1, -w,0, -w,1, s), (1, -w,x, w-x*.5,x, s), (1, -w,0, w-x*.5,0, s), (0, w-x*.5,x*.5, x*.5, 180,90, s) ),
  ( ks, (1, w,x, -w+x*.5,x, s), (1, w,0, -w+x*.5,0, s), (0, -w+x*.5,x*.5, x*.5, 180,-90, s) ), # c
  ( (w,w,w/2, w,w,w), (1, w,0, w,1, s), (1, w,x, -w+x*.5,x, s), (1, w,0, -w+x*.5,0, s), (0, -w+x*.5,x*.5, x*.5, 180,-90, s) ),
  ( ks, (1, w-x/4,x, -w+x*.5,x, s), (1, w*.7,0, -w+x*.5,0, s), (0, -w+x*.5,x*.5, x*.5, 180,-90, s), (1, -w,x/2, w-x/4,x/2, s), (0, w-x/4,x/4*3, x/4, 180,90, s) ), # e
  ( (w,w,w, w/2,w*.7,w), (0, w*.25,1-w*.75, w*.75, 180,180, s), (1, -w/2,1-w*.75, -w/2,0, s), (1, -w,x, w*.7,x, s) ), # f
  ( ks, (1, w,x, -w+x*.5,x, s), (1, w,0, -w+x*.5,0, s), (0, -w+x*.5,x*.5, x*.5, 180,-90, s), (0, 0,-d+w, w, 135,23, s), (1, w,x, w,-d+w, s) ),
  ( ka, (1, -w,1, -w,0, s), (0, -w+y*.5,x-y*.5, y*.5, 90,-135, s), (1, w-y*.5,x, -w+y*.5,x, s), (0, w-y*.5,x-y*.5, y*.5,90,135, s), (1, w,0, w,x-y*.5, s) ),
  ( (s,s,0, s,s,0), (1, 0,0, 0,x, s), (1, 0,x+s*2, 0,x+s*2+p, pp) ),
  ( (w,w/2,w/2, w,w,w/2), (0, 0,-d+w, w, 180,0, s), (1, w,x, w,-d+w, s), (1, w,x+s*2, w,x+s*2+p, pp) ), # j
  ( nw, (1, -w,0, -w,1, s), (1, -w,x/2, w,0.5+x/2, s), (1, 0,x, w,0, s) ),
  ( ka, (0, 0,w, w, 180,0, s), (1, -w,1, -w,w, s) ),
  ( km, (0, -m/2,x-m/2, m/2, 180,180, s), (0, m/2,x-m/2, m/2, 180,180, s), (1, -m,x, -m,0, s), (1, 0,x-m/2, 0,0, s), (1, m,x-m/2, m,0, s) ),
  ( ks, (1, -w,x, -w,0, s), (0, -w+y*.5,x-y*.5, y*.5, 90,-135, s), (1, w-y*.5,x, -w+y*.5,x, s), (0, w-y*.5,x-y*.5, y*.5,90,135, s), (1, w,0, w,x-y*.5, s) ), # n
  ( (q,q,d/2, q,q,d/2), (0, 0,x/2, q, 360,45, s) ), # o
  ( ks, (1, -w,x, -w,-d, s), (0, w-x/2,x/2, x/2, 180,90, s), (1, -w,x, w-x/2,x, s), (1, -w,0, w-x/2,0, s) ),
  ( ks, (1, w,x, w,-d, s), (0, -w+x/2,x/2, x/2, 180,-90, s), (1, w,x, -w+x/2,x, s), (1, w,0, -w+x/2,0, s) ),
  ( (w,w,w/2, w/2,w,w/2), (0, -w+x/2,x/2, x/2, 90,-135, s), (1, -w,x, -w,0, s), (1, -w+x/2,x, w-x/3,x, s), (0, w-x/3,x/2, x/2, 45,157, s) ), # r
  ( ks, (1, -w+x/4,x, w*.8,x, s), (1, -w+x/4,x/2, w-x/4,x/2, s), (1, -w*.8,0, w-x/4,0, s), (0, -w+x/4,x/4*3, x/4, 180,-90, s), (0, w-x/4,x/4, x/4, 180,90, s) ),
  ( nw, (0, w/4,w*.75, w*.75, 180,0, s), (1, -w/2,1, -w/2,w*.75, s), (1, -w,x+s*2, w,x+s*2, s) ), # t
  ( ks, (1, -w,w, -w,x, s), (1, w,w, w,x, s), (0, 0,w, w, 180,0, s) ), # u
  ( (w/2,w,w/2, w/2,w,w/2), (1, -w,x, 0,0, s), (1, w,x, 0,0, s) ),
  ( km, (1, -m,x, -m/2,0, s), (1, -m/2,0, 0,x, s), (1, 0,x, m/2,0, s), (1, m/2,0, m,x, s) ), #w
  ( ks, (1, -w,x, w,0, s), (1, w,x, -w,0, s) ),
  ( ks, (1, -w,w, -w,x, s),  (0, 0,w, w, 180,0, s), (0, 0,-d+w, w, 135,23, s), (1, w,x, w,-d+w, s)  ), # y
  ( ks, (1, -w,0, w,x, s), (1, -w,x, w,x, s), (1, -w,0, w,0, s) ),  # z
  ( DW, (0, 0.25,0.75, 0.25, 90,-135, s), (0, -0.25,0.75, 0.25, 90,45, s), (0, -0.25,0.25, 0.25, 90,135, s), (0, 0.25,0.25, 0.25, 90,-45, s) ),  # {
  ( s*3, (1, 0,-.2, 0,1.2, s) ),  # |
  ( DW, (0, -0.25,0.75, 0.25, 90,135, s), (0, 0.25,0.75, 0.25, 90,-45, s), (0, 0.25,0.25, 0.25, 90,-135, s), (0, -0.25,0.25, 0.25, 90,45, s) ),  # }
  ( DW, (0, -D/2,1-D/2, D/2,180,180, s), (0, D/2,1-D/2, D/2,180,0, s) ),  # ~
  ( DW, ),
  ( ks, (1, -w,-d, -w,x, s), (1, w,0, w,x, s), (0, 0,w, w, 180,0, s) ), # micro
  ( 1, (0, 0.0,0.55, 0.45, 290,180, s), (1, -0.25,0, -0.25,0.2, s), (1, 0.25,0, 0.25,0.2, s), (1, -0.5,0, -0.25,0,s), (1, 0.25,0, 0.5,0, s) ), # Omega
  ( (D/2,D,D/2, D/2,D,D/2), (1, -D/2,0.5, D/2,0.5, s) ),  # narrow hyphen
  ( 2*s, (1, 0,0.5, 0,0.5-p, pp)  ),  # interpunct
  ( DW, (0, -D/2,.5, D/2,180,180, s), (0, D/2,.5, D/2,180,0, s) ),  # AC
  ( DW, (1, -D,0.6+s, D,0.6+s, s), (1, -D,0.4-s, -D/3-s/2,0.4-s, s), (1, D/3+s/2,0.4-s, D,0.4-s, s) ),  # DC
  ]

  # wide 7 8 C G O Q
  widefont = [
  ( DW, (1, -D,1, D,1, s), (0, 1,0, 1,40,-110, s), (1, 0.24,0.65, D,1, s) ),  # 7   ## (1, D,1, -D/3,0, s)
  ( DW, (0, -D/3,(1+2*E)/2, (1-2*E)/2, 180,-90, s), (0, D/3,(1+2*E)/2, (1-2*E)/2, 180,90, s), (1, -D/3,1, D/3,1, s), (0, -D+E,E, E,90,-45, s), (0, D-E,E, E,90,45, s), (1, -D+E,0, D-E,0, s), (0, -D+E,E, E,90,-135, s), (0, D-E,E, E,90,135, s), (1, -D+E,2*E, D-E,2*E, s), ),  # 8
  ( (W*.8,W,W*.8, W,W,W), (1, -W+0.5,1, W-0.35,1, s), (1, -W+0.5,0, W-0.35,0, s), (0, -W+0.5,0.5, 0.5, 180,-90, s), (0, W-0.35,0.5, 0.5, 45,22, s), (0, W-0.35,0.5, 0.5, 45,158, s) ),
  ( (W*.8,W,W*.8, W,W,W), (1, 0.1,0.5, W,0.5, s), (1, W,0.5, W,0.15, s), (1, -W+0.5,1, W-0.35,1, s), (1, -W+0.5,0, W-0.35,0, s), (0, -W+0.5,0.5, 0.5, 180,-90, s), (0, W-0.35,0.5, 0.5, 45,22, s), (0, W-0.35,0.5, 0.5, 45,158, s) ),
  ( (W*.8,W,W*.8, W*.8,W,W*.8), (1, -W+0.5,1, W-0.5,1, s), (1, -W+0.5,0, W-0.5,0, s), (0, -W+0.5,0.5, 0.5, 180,-90, s), (0, W-0.5,0.5, 0.5, 180,90, s) ),
  ( (W*.8,W,W*.8, W,W,W*.8), (1, 0.1,0.4, W,0, s), (1, -W+0.5,1, W-0.5,1, s), (1, -W+0.5,0, W-0.5,0, s), (0, -W+0.5,0.5, 0.5, 180,-90, s), (0, W-0.5,0.5, 0.5, 180,90, s) ),
  ]

  # narrow 5 6 7 8 9  C D G O Q
  narrowfont = [
  ( DW, (0, 0,E, E, 180,0,s), (0, D-E,0.5-E*.7, E,90,135, s), (1, D,E, D,0.5-E*.7, s), (1, -D,1, -D,0.5+E*.3, s), (1, -D,1, D,1, s), (1, -D,.5+E*.3, D-E,.5+E*.3, s) ),  # 5
  ( DW, (0, 0,1-E, E, 180,180,s), (0, 0,E, E, 180,0,s), (0, 0,0.5-E*.7, E,180,180,s), (1, -D,1-E, -D,E, s), (1, D,0.5-E*.7, D,E, s) ),  # 6
  ( DW, (1, -D,1, D,1, s), (0, 1.6,0, 1.6,24,-102, s), (1, 0.127,0.63, D,1, s) ),  # 7   ## (1, D,1, -D/3,0, s)
  ( DW, (0, 0,1-E, E, 360,0, s), (0, 0,E, E, 180,0,s), (0, 0,1-E*3, E,180,180,s), (1, -D,1-E*3, -D,E, s), (1, D,1-E*3, D,E, s) ),  # 8
  ( DW, (0, 0,1-E, E, 180,180,s), (0, 0,E, E, 180,0,s), (0, 0,0.5+E*.7, E,180,0,s), (1, D,1-E, D,E, s), (1, -D,0.5+E*.7, -D,1-E, s) ),  # 9

  ( NW, (0, W*.08,W*1.08, W*1.08, 150,-15, s), (0, W*.08,1-W*1.08, W*1.08, 150,-165, s), (1, -W,W, -W,1-W, s) ),
  ( NW, (1, -W,0, -W,1, s), (1, -W,1, W-.25,1, s), (1, -W,0, W-.25,0, s), (0, W-.25,0.75, 0.25, 90,135, s), (0, W-.25,0.25, 0.25, 90,45, s), (1, W,0.75, W,0.25, s) ),
  ( NW, (1, 0.1,0.5, W,0.5, s), (1, W,0.5, W,0.12, s), (0, W*.08,W*1.08, W*1.08, 150,-15, s), (0, W*.08,1-W*1.08, W*1.08, 150,-165, s), (1, -W,W, -W,1-W, s) ),
  ( NW, (0, 0,W, W, 180,0, s), (0, 0,1-W, W, 180,180, s), (1, -W,W, -W,1-W, s), (1, W,W, W,1-W, s) ),
  ( NW, (0, 0,W, W, 180,0, s), (1, W/4,0.4, W,0, s), (0, 0,1-W, W, 180,180, s), (1, -W,W, -W,1-W, s), (1, W,W, W,1-W, s) ),
  ( NW, (0, 0.0,1-W, W, 180,180, s), (0, 0.0,0.2+W*.7, W, 45,-67, s), (0, 0.0,0.2+W*.7, W, 45,67, s), (1, -W,0.2+W*.7, -W,1-W, s), (1, W,0.2+W*.7, W,1-W, s), (1, -W/2,0, -W/2,0.2, s), (1, W/2,0, W/2,0.2, s), (1, -W,0, -W/2,0,s), (1, W/2,0, W,0, s) ), # Omega
  ]

  if width > 1.2:
    font[23] = widefont[0]
    font[24] = widefont[1]

    font[35] = widefont[2]
    font[39] = widefont[3]
    font[47] = widefont[4]
    font[49] = widefont[5]

  if W < 0.3:
    font[36] = narrowfont[6]

  if D <= E:
    font[21] = narrowfont[0]
    font[22] = narrowfont[1]
    font[23] = narrowfont[2]
    font[24] = narrowfont[3]
    font[25] = narrowfont[4]

  if W < 0.5 and mono:
    font[35] = narrowfont[5]
    font[39] = narrowfont[7]
    font[47] = narrowfont[8]
    font[49] = narrowfont[9]
    font[97] = narrowfont[10]

  if mono:
    for i in range(0, len(font)):
      font[i] = tuple([DW] + list(font[i][1:]))

  return font, -D/3+s/2
